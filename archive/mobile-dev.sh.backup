#!/bin/bash

# Enhanced mobile access with ngrok + room discovery signaling
echo "📱 Mobile Access with ngrok + Room Discovery"
echo "============================================="

# Kill any existing processes
pkill -f "ngrok"
lsof -ti:3000 | xargs kill -9 2>/dev/null || true
lsof -ti:3001 | xargs kill -9 2>/dev/null || true

echo "🔌 Starting signaling server..."
node signaling-server.js &
SIGNALING_PID=$!

echo "🚀 Starting Next.js..."
npm run dev &
NEXTJS_PID=$!

# Wait for servers to start
echo "⏳ Waiting for servers to start..."
sleep 10

# Start ngrok for main app
echo "🌐 Starting ngrok tunnel for app..."
ngrok http 3000 --log=stdout > /tmp/ngrok-app.log &
NGROK_APP_PID=$!

# Start ngrok for signaling (use different method for older ngrok versions)
echo "🌐 Starting ngrok tunnel for signaling..."
# Use a different port for the web interface by starting ngrok in a separate process
NGROK_PORT=4040
if lsof -i :4041 >/dev/null 2>&1 || pgrep -f "ngrok.*3000" >/dev/null; then
    NGROK_PORT=4042
fi

# For older ngrok versions, we'll use the API to get URLs instead
ngrok http 3001 --log=stdout > /tmp/ngrok-signaling.log &
NGROK_SIGNALING_PID=$!

# Wait for ngrok to establish tunnels
echo "⏳ Waiting for ngrok tunnels to establish..."
sleep 10

# Extract actual URLs from ngrok logs and API
APP_URL=""
SIGNALING_URL=""

echo "🔍 Extracting ngrok URLs..."

for i in {1..15}; do
    # Try to get URLs from ngrok API first
    if command -v curl >/dev/null 2>&1; then
        # Try the API approach
        API_RESPONSE=$(curl -s http://localhost:4040/api/tunnels 2>/dev/null)
        if [ $? -eq 0 ] && [ -n "$API_RESPONSE" ]; then
            # Extract URLs using grep since we might not have jq
            APP_URL=$(echo "$API_RESPONSE" | grep -o 'https://[^"]*\.ngrok[^"]*' | head -1)
            SIGNALING_URL=$(echo "$API_RESPONSE" | grep -o 'https://[^"]*\.ngrok[^"]*' | tail -1)
            
            # If we only got one URL, try parsing the logs
            if [ "$APP_URL" = "$SIGNALING_URL" ]; then
                SIGNALING_URL=""
            fi
        fi
    fi
    
    # Fallback: parse from log files
    if [ -z "$APP_URL" ] && [ -f /tmp/ngrok-app.log ]; then
        APP_URL=$(grep -o 'https://[^[:space:]]*\.ngrok[^[:space:]]*' /tmp/ngrok-app.log | head -1)
    fi
    
    if [ -z "$SIGNALING_URL" ] && [ -f /tmp/ngrok-signaling.log ]; then
        SIGNALING_URL=$(grep -o 'https://[^[:space:]]*\.ngrok[^[:space:]]*' /tmp/ngrok-signaling.log | head -1)
    fi
    
    # Check if we have at least the app URL
    if [ -n "$APP_URL" ]; then
        echo "✅ Found app URL: $APP_URL"
        if [ -n "$SIGNALING_URL" ] && [ "$APP_URL" != "$SIGNALING_URL" ]; then
            echo "✅ Found signaling URL: $SIGNALING_URL"
            break
        else
            echo "⚠️  Only found one ngrok tunnel, signaling will use localhost"
            SIGNALING_URL="http://localhost:3001"
            break
        fi
    fi
    
    echo "⏳ Still waiting for ngrok URLs... (attempt $i/15)"
    sleep 2
done

if [ -z "$APP_URL" ]; then
    echo "❌ Failed to get ngrok URLs. Manual setup required:"
    echo "   1. Check http://localhost:4040 for app URL"
    echo "   2. For signaling, we'll use localhost (works for same-device testing)"
    echo "   3. For cross-device testing, get signaling URL from ngrok web UI"
    SIGNALING_URL="http://localhost:3001"
else
    echo "✅ Got app URL successfully!"
    echo "📱 App URL: $APP_URL"
    
    if [ -n "$SIGNALING_URL" ] && [ "$SIGNALING_URL" != "$APP_URL" ]; then
        echo "🔌 Signaling URL: $SIGNALING_URL"
    else
        echo "🔌 Signaling URL: http://localhost:3001 (localhost fallback)"
        SIGNALING_URL="http://localhost:3001"
    fi
    
    # Update .env.local with signaling URL
    echo "NEXT_PUBLIC_SIGNALING_SERVER=$SIGNALING_URL" > .env.local
    echo "📝 Updated .env.local with signaling URL"
    
    # Kill and restart Next.js to pick up new environment
    echo "🔄 Restarting Next.js to pick up new signaling URL..."
    kill $NEXTJS_PID 2>/dev/null
    sleep 2
    npm run dev &
    NEXTJS_PID=$!
    
    echo "⏳ Waiting for Next.js to restart..."
    sleep 5
fi

echo ""
echo "✅ Setup complete!"
echo ""
if [ -n "$APP_URL" ]; then
    echo "📱 Mobile app URL: $APP_URL"
    echo "🔌 Signaling: $SIGNALING_URL"
    if [[ $SIGNALING_URL == *"ngrok"* ]]; then
        echo "🎯 Room discovery: ENABLED (full cross-device)"
    else
        echo "🎯 Room discovery: ENABLED (localhost - same device testing)"
    fi
else
    echo "📱 Get app URL from: http://localhost:4040"
    echo "🔌 Signaling: localhost:3001"
    echo "🎯 Room discovery: ENABLED (localhost)"
fi
echo ""
echo "🎪 Enhanced features available:"
echo "   • Room-based peer discovery (auto-reconnection)"
echo "   • Host refresh resilience"
echo "   • Multiple STUN/TURN server fallbacks"
echo "   • Better mobile WebRTC stability"
echo ""
echo "💡 Test the host refresh fix:"
echo "   1. Create room on desktop: http://localhost:3000"
if [ -n "$APP_URL" ]; then
    echo "   2. Join on mobile: $APP_URL"
else
    echo "   2. Get mobile URL from: http://localhost:4040"
fi
echo "   3. Refresh desktop browser"
echo "   4. Mobile should auto-reconnect without QR rescan!"
echo ""
echo "🔍 Quick check:"
echo "   • App: http://localhost:3000"
echo "   • Ngrok web UI: http://localhost:4040"
if [[ $SIGNALING_URL == *"localhost"* ]]; then
    echo "   • Signaling health: http://localhost:3001/health"
fi
echo ""
echo "Press Ctrl+C to stop everything"

# Cleanup function
cleanup() {
    echo ""
    echo "🧹 Shutting down..."
    kill $NEXTJS_PID 2>/dev/null || true
    kill $SIGNALING_PID 2>/dev/null || true
    kill $NGROK_APP_PID 2>/dev/null || true
    kill $NGROK_SIGNALING_PID 2>/dev/null || true
    pkill -f "ngrok"
    exit 0
}

trap cleanup SIGINT SIGTERM

# Keep running
while true; do
    sleep 10
done