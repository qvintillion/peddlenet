#!/bin/bash

echo "üö® EMERGENCY API ROUTE REPAIR"
echo "============================="

echo ""
echo "The TypeScript conversion broke the API routes. Let's fix them properly..."

echo ""
echo "Step 1: Fixing specific broken syntax in API routes..."

# Fix the specific broken files mentioned in the errors
echo "üîß Fixing src/app/api/admin/analytics/route.js..."
if [ -f "src/app/api/admin/analytics/route.js" ]; then
    # Fix the broken headers declaration
    sed -i '' 's/const headers<string, string> =/const headers =/g' "src/app/api/admin/analytics/route.js"
    echo "   ‚úÖ Fixed headers declaration"
fi

echo "üîß Fixing src/app/api/admin/broadcast/route.js..."
if [ -f "src/app/api/admin/broadcast/route.js" ]; then
    # Fix the broken JSON.stringify
    sed -i '' 's/body\.stringify/JSON.stringify/g' "src/app/api/admin/broadcast/route.js"
    echo "   ‚úÖ Fixed JSON.stringify"
fi

echo "üîß Fixing src/app/api/admin/database/route.js..."
if [ -f "src/app/api/admin/database/route.js" ]; then
    # Fix the broken Date.now()
    sed -i '' 's/timestamp\.now()/Date.now()/g' "src/app/api/admin/database/route.js"
    echo "   ‚úÖ Fixed Date.now()"
fi

echo ""
echo "Step 2: Comprehensive API route cleanup..."

# Clean ALL API routes systematically
find src/app/api -name "route.js" | while read file; do
    echo "üîß Cleaning API route: $file"
    
    # Fix common broken patterns from TypeScript conversion
    sed -i '' 's/const headers<[^>]*>/const headers/g' "$file"
    sed -i '' 's/const [a-zA-Z]*<[^>]*>/const headers/g' "$file"
    sed -i '' 's/JSON\.parse<[^>]*>/JSON.parse/g' "$file"
    sed -i '' 's/JSON\.stringify<[^>]*>/JSON.stringify/g' "$file"
    sed -i '' 's/body\.stringify/JSON.stringify/g' "$file"
    sed -i '' 's/timestamp\.now()/Date.now()/g' "$file"
    sed -i '' 's/console\.log<[^>]*>/console.log/g' "$file"
    sed -i '' 's/console\.error<[^>]*>/console.error/g' "$file"
    
    # Remove any remaining generic syntax
    sed -i '' 's/<[a-zA-Z, |<>[\]{}]*>//g' "$file"
    
    # Remove any remaining type annotations
    sed -i '' 's/: [A-Z][a-zA-Z]*//g' "$file"
    sed -i '' 's/: string//g' "$file"
    sed -i '' 's/: number//g' "$file"
    sed -i '' 's/: boolean//g' "$file"
    sed -i '' 's/: object//g' "$file"
    
    # Fix any remaining interface/type declarations
    sed -i '' '/^interface /,/^}/d' "$file"
    sed -i '' '/^type /d' "$file"
    sed -i '' '/^export interface /,/^}/d' "$file"
    sed -i '' '/^export type /d' "$file"
    
    echo "   ‚úÖ Cleaned $file"
done

echo ""
echo "Step 3: Fix any remaining problematic utility files..."

# Fix the remaining files mentioned in the scan
problematic_files=(
    "src/hooks/use-background-notifications-original.js"
    "src/lib/room-code-storage.js"
)

for file in "${problematic_files[@]}"; do
    if [ -f "$file" ]; then
        # Convert to TypeScript if it has TypeScript syntax
        if grep -q "interface \|}: [A-Z]\|: [A-Z][a-zA-Z]*\|<[A-Z]" "$file"; then
            if [[ "$file" == *.js ]]; then
                new_file="${file%.js}.ts"
            else
                new_file="${file%.jsx}.tsx"
            fi
            echo "üîÑ Converting $file ‚Üí $new_file (has TypeScript syntax)"
            mv "$file" "$new_file"
            echo "   ‚úÖ Converted"
        fi
    fi
done

echo ""
echo "Step 4: Testing the build..."

npm run build

if [ $? -eq 0 ]; then
    echo ""
    echo "üéâ BUILD SUCCESSFUL!"
    echo "==================="
    echo ""
    echo "üöÄ Deploying to Vercel..."
    npm run deploy:vercel:complete
    
    if [ $? -eq 0 ]; then
        echo ""
        echo "‚úÖ DEPLOYMENT COMPLETE!"
        echo "======================="
        echo ""
        echo "üåê Your festival chat is live:"
        echo "   ‚Ä¢ Frontend: https://peddlenet.app"
        echo "   ‚Ä¢ Admin: https://peddlenet.app/admin-analytics"
        echo "   ‚Ä¢ API Health: https://peddlenet.app/api/health"
        echo ""
        echo "üéØ What was fixed:"
        echo "   ‚Ä¢ Repaired broken API route syntax"
        echo "   ‚Ä¢ Fixed headers<string, string> ‚Üí headers"
        echo "   ‚Ä¢ Fixed body.stringify ‚Üí JSON.stringify"
        echo "   ‚Ä¢ Fixed timestamp.now() ‚Üí Date.now()"
        echo "   ‚Ä¢ Cleaned all remaining generic syntax"
        echo ""
        echo "üö® FESTIVAL CHAT IS FINALLY WORKING! üö®"
    else
        echo ""
        echo "‚ùå Build succeeded but deployment failed"
        echo "Check Vercel dashboard for deployment issues"
    fi
else
    echo ""
    echo "‚ùå Build still failing. Current errors:"
    echo ""
    npm run build 2>&1 | head -60
    
    echo ""
    echo "üîç Let's check the problematic API routes:"
    
    # Check specific files for syntax issues
    for file in src/app/api/admin/analytics/route.js src/app/api/admin/broadcast/route.js src/app/api/admin/database/route.js; do
        if [ -f "$file" ]; then
            echo ""
            echo "üìÑ Checking $file for issues:"
            grep -n "headers<\|body\.\|timestamp\." "$file" || echo "   No obvious issues found"
        fi
    done
fi

echo ""
echo "üìä REPAIR SUMMARY"
echo "=================="
echo "‚Ä¢ Fixed broken API route syntax from TypeScript conversion"
echo "‚Ä¢ Corrected malformed JavaScript patterns"
echo "‚Ä¢ Ensured all API routes are valid JavaScript"
echo "‚Ä¢ Converted remaining TypeScript files properly"
echo ""
echo "Your API routes should now work correctly! üéØ"
