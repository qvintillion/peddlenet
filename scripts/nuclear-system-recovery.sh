#!/bin/bash

# üß® Nuclear Fix Script - Complete System Recovery
# ==============================================
# Emergency script to fix all common Festival Chat issues
# Use when multiple systems are broken or after major changes

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

echo -e "${RED}üß® NUCLEAR FIX - COMPLETE SYSTEM RECOVERY${NC}"
echo -e "${RED}========================================${NC}"
echo -e "${YELLOW}‚ö†Ô∏è  This script will:${NC}"
echo -e "${YELLOW}   ‚Ä¢ Reset all environment configurations${NC}"
echo -e "${YELLOW}   ‚Ä¢ Clear all caches and build artifacts${NC}"
echo -e "${YELLOW}   ‚Ä¢ Reinstall dependencies${NC}"
echo -e "${YELLOW}   ‚Ä¢ Reset admin dashboard${NC}"
echo -e "${YELLOW}   ‚Ä¢ Fix common deployment issues${NC}"
echo ""
echo -e "${RED}üíÄ This is destructive! Only use when system is broken.${NC}"
echo ""
read -p "Continue with nuclear fix? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${GREEN}‚úÖ Nuclear fix cancelled${NC}"
    exit 0
fi

echo ""
echo -e "${PURPLE}üöÄ Starting nuclear system recovery...${NC}"
echo ""

# Step 1: Stop all running processes
echo -e "${BLUE}Step 1: Stopping all development servers...${NC}"
pkill -f "next dev" 2>/dev/null || echo "No Next.js dev server running"
pkill -f "signaling-server" 2>/dev/null || echo "No signaling server running"
pkill -f "npm run dev" 2>/dev/null || echo "No npm dev processes running"
pkill -f "firebase serve" 2>/dev/null || echo "No Firebase serve running"
echo -e "${GREEN}‚úÖ All processes stopped${NC}"

# Step 2: Backup current state
echo ""
echo -e "${BLUE}Step 2: Creating backup of current state...${NC}"
BACKUP_DIR="backup/nuclear-fix-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$BACKUP_DIR"

# Backup critical files
cp -f .env.local "$BACKUP_DIR/.env.local.backup" 2>/dev/null || echo "No .env.local to backup"
cp -f .env.staging "$BACKUP_DIR/.env.staging.backup" 2>/dev/null || echo "No .env.staging to backup"
cp -f .env.production "$BACKUP_DIR/.env.production.backup" 2>/dev/null || echo "No .env.production to backup"
cp -f package.json "$BACKUP_DIR/package.json.backup" 2>/dev/null || echo "No package.json to backup"

echo -e "${GREEN}‚úÖ Backup created in $BACKUP_DIR${NC}"

# Step 3: Nuclear cache clearing
echo ""
echo -e "${BLUE}Step 3: Nuclear cache clearing...${NC}"

# Clear Next.js caches
rm -rf .next/
rm -rf functions/.next/
rm -rf functions/lib/
echo -e "${YELLOW}  ‚úÖ Next.js build caches cleared${NC}"

# Clear node modules cache
rm -rf node_modules/.cache/
rm -rf functions/node_modules/.cache/ 2>/dev/null || true
echo -e "${YELLOW}  ‚úÖ Node modules cache cleared${NC}"

# Clear npm cache
npm cache clean --force 2>/dev/null || echo "NPM cache clean failed (non-critical)"
echo -e "${YELLOW}  ‚úÖ NPM cache cleared${NC}"

# Clear Firebase cache
rm -rf .firebase/
echo -e "${YELLOW}  ‚úÖ Firebase cache cleared${NC}"

# Clear Vercel cache
rm -rf .vercel/cache/ 2>/dev/null || true
echo -e "${YELLOW}  ‚úÖ Vercel cache cleared${NC}"

# Clear any temp files
rm -rf tmp/
rm -rf temp/
rm -f *.log
rm -f *.tmp
echo -e "${YELLOW}  ‚úÖ Temporary files cleared${NC}"

echo -e "${GREEN}‚úÖ Nuclear cache clearing complete${NC}"

# Step 4: Reset environment configuration
echo ""
echo -e "${BLUE}Step 4: Resetting environment configuration...${NC}"

# Reset to development environment
cat > .env.local << 'EOF'
# Development environment - Auto-generated by nuclear fix
NEXT_PUBLIC_DETECTED_IP=localhost
BUILD_TARGET=development
NODE_ENV=development
PLATFORM=local
EOF

echo -e "${GREEN}‚úÖ Environment reset to development${NC}"

# Step 5: Reinstall dependencies
echo ""
echo -e "${BLUE}Step 5: Reinstalling dependencies...${NC}"

# Clear and reinstall main dependencies
rm -rf node_modules/
rm -f package-lock.json
echo -e "${YELLOW}  ‚úÖ Cleared main node_modules${NC}"

npm install
echo -e "${YELLOW}  ‚úÖ Reinstalled main dependencies${NC}"

# Clear and reinstall functions dependencies
if [ -d "functions" ]; then
    cd functions
    rm -rf node_modules/
    rm -f package-lock.json
    npm install
    cd ..
    echo -e "${YELLOW}  ‚úÖ Reinstalled functions dependencies${NC}"
fi

echo -e "${GREEN}‚úÖ Dependencies reinstalled${NC}"

# Step 6: Verify and fix critical files
echo ""
echo -e "${BLUE}Step 6: Verifying critical files...${NC}"

# Check if universal server exists
if [ ! -f "signaling-server.js" ]; then
    echo -e "${RED}‚ùå Universal server missing!${NC}"
    echo -e "${YELLOW}   This is critical - the universal server file is required${NC}"
    echo -e "${YELLOW}   Please restore from backup or git${NC}"
    exit 1
else
    echo -e "${GREEN}‚úÖ Universal server exists${NC}"
fi

# Check if package.json has correct scripts
if ! grep -q "dev:mobile" package.json; then
    echo -e "${YELLOW}‚ö†Ô∏è  dev:mobile script missing from package.json${NC}"
    echo -e "${YELLOW}   This might cause mobile development issues${NC}"
else
    echo -e "${GREEN}‚úÖ Package.json scripts verified${NC}"
fi

# Check Next.js config
if [ ! -f "next.config.ts" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  next.config.ts missing${NC}"
else
    echo -e "${GREEN}‚úÖ Next.js config exists${NC}"
fi

echo -e "${GREEN}‚úÖ Critical files verified${NC}"

# Step 7: Test basic functionality
echo ""
echo -e "${BLUE}Step 7: Testing basic functionality...${NC}"

# Test build
echo -e "${YELLOW}Testing build process...${NC}"
if npm run build > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Build test passed${NC}"
else
    echo -e "${RED}‚ùå Build test failed${NC}"
    echo -e "${YELLOW}   Check for syntax errors or missing dependencies${NC}"
fi

# Test server start
echo -e "${YELLOW}Testing server startup...${NC}"
timeout 10s node signaling-server.js > /dev/null 2>&1 &
SERVER_PID=$!
sleep 3

if kill -0 $SERVER_PID 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Server startup test passed${NC}"
    kill $SERVER_PID 2>/dev/null || true
else
    echo -e "${RED}‚ùå Server startup test failed${NC}"
    echo -e "${YELLOW}   Check signaling-server.js for errors${NC}"
fi

echo -e "${GREEN}‚úÖ Basic functionality tests complete${NC}"

# Step 8: Make scripts executable
echo ""
echo -e "${BLUE}Step 8: Making scripts executable...${NC}"
chmod +x scripts/*.sh 2>/dev/null || true
chmod +x tools/*.sh 2>/dev/null || true
echo -e "${GREEN}‚úÖ Scripts made executable${NC}"

# Step 9: Final recommendations
echo ""
echo -e "${PURPLE}üéâ NUCLEAR FIX COMPLETE!${NC}"
echo -e "${PURPLE}=======================${NC}"
echo ""
echo -e "${GREEN}‚úÖ System Recovery Summary:${NC}"
echo -e "${YELLOW}   ‚Ä¢ All caches cleared${NC}"
echo -e "${YELLOW}   ‚Ä¢ Dependencies reinstalled${NC}"
echo -e "${YELLOW}   ‚Ä¢ Environment reset to development${NC}"
echo -e "${YELLOW}   ‚Ä¢ Critical files verified${NC}"
echo -e "${YELLOW}   ‚Ä¢ Basic functionality tested${NC}"
echo ""
echo -e "${BLUE}üöÄ Next Steps:${NC}"
echo -e "${YELLOW}1. Test development environment:${NC}"
echo -e "${YELLOW}   ./scripts/dev-mobile.sh${NC}"
echo ""
echo -e "${YELLOW}2. If admin dashboard needed, test it at:${NC}"
echo -e "${YELLOW}   http://localhost:3000/admin-analytics${NC}"
echo ""
echo -e "${YELLOW}3. If issues persist, check:${NC}"
echo -e "${YELLOW}   ‚Ä¢ Network connectivity${NC}"
echo -e "${YELLOW}   ‚Ä¢ Firewall settings${NC}"
echo -e "${YELLOW}   ‚Ä¢ Node.js version (18+)${NC}"
echo ""
echo -e "${BLUE}üìã Environment Commands:${NC}"
echo -e "${YELLOW}   ./scripts/env-switch.sh show      # Check current environment${NC}"
echo -e "${YELLOW}   ./scripts/env-switch.sh staging   # Switch to staging${NC}"
echo -e "${YELLOW}   ./scripts/env-switch.sh production # Switch to production${NC}"
echo ""
echo -e "${GREEN}üé™ Festival Chat nuclear recovery complete! üé™${NC}"
echo ""
echo -e "${PURPLE}üíæ Backup Location: $BACKUP_DIR${NC}"
echo -e "${PURPLE}üìù Log this recovery in your project notes${NC}"
