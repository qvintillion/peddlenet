// Quick STUN server test - run this in browser console\nconst testSTUNServers = async () => {\n  const servers = [\n    'stun:stun.l.google.com:19302',\n    'stun:stun.cloudflare.com:3478',\n    'turn:openrelay.metered.ca:80'\n  ];\n  \n  for (const server of servers) {\n    try {\n      const pc = new RTCPeerConnection({ iceServers: [{ urls: server }] });\n      \n      // Create a data channel to force ICE gathering\n      pc.createDataChannel('test');\n      \n      // Set up local description to start ICE gathering\n      const offer = await pc.createOffer();\n      await pc.setLocalDescription(offer);\n      \n      console.log(`🧪 Testing ${server}...`);\n      \n      // Wait for ICE candidates\n      await new Promise((resolve, reject) => {\n        let candidateCount = 0;\n        const timeout = setTimeout(() => {\n          console.log(`❌ ${server}: Timeout (${candidateCount} candidates)`);\n          pc.close();\n          resolve();\n        }, 5000);\n        \n        pc.onicecandidate = (event) => {\n          if (event.candidate) {\n            candidateCount++;\n            console.log(`✅ ${server}: Got candidate ${candidateCount}:`, event.candidate.candidate);\n          } else {\n            clearTimeout(timeout);\n            console.log(`✅ ${server}: ICE gathering complete (${candidateCount} candidates)`);\n            pc.close();\n            resolve();\n          }\n        };\n        \n        pc.onicegatheringstatechange = () => {\n          console.log(`🔄 ${server}: ICE gathering state:`, pc.iceGatheringState);\n        };\n      });\n    } catch (error) {\n      console.error(`❌ ${server}: Error:`, error);\n    }\n  }\n};\n\n// Run the test\ntestSTUNServers();