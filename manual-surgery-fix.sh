#!/bin/bash

echo "üö® MANUAL SURGERY: FIXING EXACT SYNTAX ERRORS"
echo "=============================================="

echo ""
echo "The API routes have specific corrupted patterns. Let's fix them manually..."

echo ""
echo "Step 1: Manually fixing broadcast route..."
cat > src/app/api/admin/broadcast/route.js << 'EOF'
import { NextResponse } from 'next/server';

export const dynamic = 'force-dynamic';

function getWebSocketServerUrl() {
  if (process.env.NODE_ENV === 'development') {
    return 'http://localhost:3001';
  }
  return process.env.WEBSOCKET_SERVER_URL || 'https://peddlenet-websocket-server-hfttiarlja-uc.a.run.app';
}

export async function POST(request) {
  try {
    const body = await request.json();
    const { message } = body;
    
    if (!message) {
      return NextResponse.json({ error: 'Message is required' }, { status: 400 });
    }
    
    const serverUrl = getWebSocketServerUrl();
    console.log('üåê Proxying broadcast request to:', `${serverUrl}/admin/broadcast`);
    
    const response = await fetch(`${serverUrl}/admin/broadcast`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ message })
    });

    if (!response.ok) {
      console.error('‚ùå WebSocket server broadcast failed:', response.status, response.statusText);
      return NextResponse.json({ error: 'Failed to send broadcast' }, { status: response.status });
    }

    const data = await response.json();
    console.log('‚úÖ Broadcast sent successfully');
    return NextResponse.json(data);
  } catch (error) {
    console.error('‚ùå Broadcast API error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}
EOF

echo "‚úÖ Fixed broadcast route"

echo ""
echo "Step 2: Manually fixing database wipe route..."
cat > src/app/api/admin/database/wipe/route.js << 'EOF'
import { NextResponse } from 'next/server';

export const dynamic = 'force-dynamic';

function getWebSocketServerUrl() {
  if (process.env.NODE_ENV === 'development') {
    return 'http://localhost:3001';
  }
  return process.env.WEBSOCKET_SERVER_URL || 'https://peddlenet-websocket-server-hfttiarlja-uc.a.run.app';
}

export async function POST(request) {
  try {
    const body = await request.json();
    const { confirm } = body;
    
    if (!confirm) {
      return NextResponse.json({ error: 'Confirmation is required' }, { status: 400 });
    }
    
    const serverUrl = getWebSocketServerUrl();
    console.log('üåê Proxying database wipe request to:', `${serverUrl}/admin/database/wipe`);
    
    const response = await fetch(`${serverUrl}/admin/database/wipe`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ confirm })
    });

    if (!response.ok) {
      console.error('‚ùå WebSocket server wipe failed:', response.status, response.statusText);
      return NextResponse.json({ error: 'Failed to wipe database' }, { status: response.status });
    }

    const data = await response.json();
    console.log('‚úÖ Database wipe completed successfully');
    return NextResponse.json(data);
  } catch (error) {
    console.error('‚ùå Database wipe API error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}
EOF

echo "‚úÖ Fixed database wipe route"

echo ""
echo "Step 3: Fixing info route..."
if [ -f "src/app/api/admin/info/route.js" ]; then
    # Read the file and fix the timestamp.now() issue
    sed -i '' 's/timestamp\.now()/timestamp: Date.now()/g' "src/app/api/admin/info/route.js"
    echo "‚úÖ Fixed info route timestamp"
fi

echo ""
echo "Step 4: Fixing mesh-status route..."
if [ -f "src/app/api/admin/mesh-status/route.js" ]; then
    # Fix the signal.timeout syntax
    sed -i '' 's/signal\.timeout([0-9]*),/signal: AbortSignal.timeout(10000),/g' "src/app/api/admin/mesh-status/route.js"
    echo "‚úÖ Fixed mesh-status route signal"
fi

echo ""
echo "Step 5: Fixing database route..."
if [ -f "src/app/api/admin/database/route.js" ]; then
    # Fix the timestamp.now() issue
    sed -i '' 's/timestamp\.now()/timestamp: Date.now()/g' "src/app/api/admin/database/route.js"
    echo "‚úÖ Fixed database route timestamp"
fi

echo ""
echo "Step 6: Fixing register-room-code route..."
if [ -f "src/app/api/register-room-code/route.js" ]; then
    # Fix the TypeScript Map syntax
    sed -i '' 's/new Map<string, string>()/new Map()/g' "src/app/api/register-room-code/route.js"
    echo "‚úÖ Fixed register-room-code route Map"
fi

echo ""
echo "Step 7: Final systematic cleanup..."

# Clean ALL remaining broken patterns
find src/app/api -name "route.js" | while read file; do
    echo "üîß Final cleanup: $file"
    
    # Fix specific broken patterns
    sed -i '' 's/body\.stringify/body: JSON.stringify/g' "$file"
    sed -i '' 's/timestamp\.now()/timestamp: Date.now()/g' "$file"
    sed -i '' 's/headers\.get/headers: { "Content-Type": "application\/json" }/g' "$file"
    sed -i '' 's/signal\.timeout([0-9]*)/signal: AbortSignal.timeout(10000)/g' "$file"
    
    # Remove any remaining TypeScript generics
    sed -i '' 's/new Map<[^>]*>()/new Map()/g' "$file"
    sed -i '' 's/new Set<[^>]*>()/new Set()/g' "$file"
    sed -i '' 's/new Array<[^>]*>()/new Array()/g' "$file"
    
    echo "   ‚úÖ Cleaned $file"
done

echo ""
echo "Step 8: Testing the build..."

npm run build

if [ $? -eq 0 ]; then
    echo ""
    echo "üéâ BUILD SUCCESSFUL!"
    echo "==================="
    echo ""
    echo "üöÄ Deploying to Vercel..."
    npm run deploy:vercel:complete
    
    if [ $? -eq 0 ]; then
        echo ""
        echo "‚úÖ DEPLOYMENT COMPLETE!"
        echo "======================="
        echo ""
        echo "üåê Your festival chat is live:"
        echo "   ‚Ä¢ Frontend: https://peddlenet.app"
        echo "   ‚Ä¢ Admin: https://peddlenet.app/admin-analytics"
        echo ""
        echo "üéØ Manual fixes applied:"
        echo "   ‚Ä¢ Rewrote broadcast route with correct syntax"
        echo "   ‚Ä¢ Rewrote database wipe route with correct syntax"
        echo "   ‚Ä¢ Fixed timestamp.now() ‚Üí timestamp: Date.now()"
        echo "   ‚Ä¢ Fixed body.stringify ‚Üí body: JSON.stringify"
        echo "   ‚Ä¢ Fixed signal.timeout ‚Üí signal: AbortSignal.timeout"
        echo "   ‚Ä¢ Removed all TypeScript generics"
        echo ""
        echo "üé™ FESTIVAL CHAT IS FINALLY WORKING! üé™"
    else
        echo "‚ùå Build succeeded but deployment failed"
    fi
else
    echo ""
    echo "‚ùå Build still failing:"
    npm run build 2>&1 | head -50
    
    echo ""
    echo "üîç Let's check the exact content of problematic lines:"
    
    # Show exact problematic lines
    for file in src/app/api/admin/broadcast/route.js src/app/api/admin/database/route.js; do
        if [ -f "$file" ]; then
            echo ""
            echo "üìÑ Lines 30-40 in $file:"
            sed -n '30,40p' "$file"
        fi
    done
fi

echo ""
echo "üìä MANUAL SURGERY SUMMARY"
echo "========================="
echo "‚Ä¢ Manually rewrote corrupted API routes"
echo "‚Ä¢ Fixed all broken fetch syntax patterns"
echo "‚Ä¢ Ensured proper JavaScript object syntax"
echo "‚Ä¢ Removed all TypeScript generics"
echo ""
echo "This should finally fix all syntax errors! üéØ"
