#!/bin/bash

echo "üö® COMPREHENSIVE TYPESCRIPT SYNTAX FIX"
echo "======================================"

echo ""
echo "Step 1: Converting ALL utility files with TypeScript syntax to .ts..."

# Utility files that need to be converted to .ts
util_files=(
    "src/utils/message-persistence.js"
    "src/utils/server-utils.js"
    "src/utils/room-utils.js"
    "src/utils/network-utils.js"
    "src/utils/peer-utils.js"
    "src/utils/qr-utils.js"
    "src/utils/qr-peer-utils.js"
    "src/lib/types.js"
    "src/lib/constants.js"
)

for file in "${util_files[@]}"; do
    if [ -f "$file" ]; then
        new_file="${file%.js}.ts"
        echo "üîÑ Converting $file ‚Üí $new_file"
        mv "$file" "$new_file"
        echo "   ‚úÖ Converted successfully"
    else
        echo "   ‚è≠Ô∏è  $file not found, skipping"
    fi
done

echo ""
echo "Step 2: Converting remaining components with TypeScript syntax..."

# Check for any remaining .jsx files with TypeScript syntax
remaining_jsx_files=(
    "src/app/admin-analytics/page.jsx"
    "src/app/diagnostics/page.jsx"
    "src/app/layout.jsx"
    "src/app/page.jsx"
)

for file in "${remaining_jsx_files[@]}"; do
    if [ -f "$file" ]; then
        # Check if file contains TypeScript syntax
        if grep -q "interface \|: [A-Z][a-zA-Z]*\|<[A-Z][a-zA-Z]*>" "$file"; then
            new_file="${file%.jsx}.tsx"
            echo "üîÑ Converting $file ‚Üí $new_file (contains TypeScript syntax)"
            mv "$file" "$new_file"
            echo "   ‚úÖ Converted successfully"
        else
            echo "   ‚úÖ $file is clean JavaScript, keeping as .jsx"
        fi
    fi
done

echo ""
echo "Step 3: Fixing type definition files..."

# Fix the type definition file that's incorrectly named .js
if [ -f "src/types/jsqr.d.js" ]; then
    echo "üîß Fixing incorrectly named type definition file..."
    mv "src/types/jsqr.d.js" "src/types/jsqr.d.ts"
    echo "   ‚úÖ Renamed jsqr.d.js ‚Üí jsqr.d.ts"
fi

echo ""
echo "Step 4: Ensuring API routes are clean JavaScript..."

# API routes should be pure JavaScript - remove any TypeScript syntax
find src/app/api -name "*.js" | while read file; do
    if grep -q "interface \|: [A-Z][a-zA-Z]*\|<[A-Z][a-zA-Z]*>\|: string\|: number\|: boolean" "$file"; then
        echo "üîß Cleaning TypeScript syntax from API route: $file"
        
        # Remove various TypeScript syntax patterns
        sed -i '' '/^interface /,/^}/d' "$file"
        sed -i '' 's/(request: NextRequest)/(request)/g' "$file"
        sed -i '' 's/(request: NextResponse)/(request)/g' "$file"
        sed -i '' 's/: NextRequest//g' "$file"
        sed -i '' 's/: NextResponse//g' "$file"
        sed -i '' 's/: string//g' "$file"
        sed -i '' 's/: number//g' "$file"
        sed -i '' 's/: boolean//g' "$file"
        sed -i '' 's/: [A-Z][a-zA-Z]*//g' "$file"
        sed -i '' 's/<[A-Z][a-zA-Z]*>//g' "$file"
        
        echo "   ‚úÖ Cleaned TypeScript syntax"
    fi
done

echo ""
echo "Step 5: Verifying API routes are enabled..."

# Check that API routes export the correct functions
echo "üîç Checking API route exports..."

find src/app/api -name "route.js" | while read file; do
    if ! grep -q "export.*GET\|export.*POST\|export.*PUT\|export.*DELETE" "$file"; then
        echo "‚ö†Ô∏è  WARNING: $file may not have proper exports"
    else
        echo "   ‚úÖ $file has proper exports"
    fi
done

echo ""
echo "Step 6: Testing build..."

npm run build

if [ $? -eq 0 ]; then
    echo ""
    echo "‚úÖ BUILD SUCCESSFUL!"
    echo ""
    echo "üîç Verifying API routes are working..."
    
    # Quick check that the server can start
    timeout 10s npm start &
    sleep 5
    
    # Test a basic API endpoint
    curl -s http://localhost:3000/api/health > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "‚úÖ API routes are responding"
    else
        echo "‚ö†Ô∏è  API routes may need additional testing"
    fi
    
    # Kill the test server
    pkill -f "next start" 2>/dev/null
    
    echo ""
    echo "üöÄ Deploying to Vercel..."
    npm run deploy:vercel:complete
    
    if [ $? -eq 0 ]; then
        echo ""
        echo "üéâ DEPLOYMENT COMPLETE!"
        echo "======================================"
        echo ""
        echo "‚úÖ Your festival chat is now deployed:"
        echo "   üåê Frontend: https://peddlenet.app"
        echo "   üìä Admin: https://peddlenet.app/admin-analytics" 
        echo "   üîß API Health: https://peddlenet.app/api/health"
        echo ""
        echo "üéØ What was fixed:"
        echo "   ‚Ä¢ All utility files converted to TypeScript (.ts)"
        echo "   ‚Ä¢ All admin components converted to TypeScript (.tsx)"
        echo "   ‚Ä¢ API routes cleaned and verified as JavaScript (.js)"
        echo "   ‚Ä¢ Type definitions properly named (.d.ts)"
        echo "   ‚Ä¢ Build system now handles TypeScript/JavaScript correctly"
    else
        echo ""
        echo "‚ùå Deployment failed after successful build"
        echo "Check Vercel logs for deployment-specific issues"
    fi
else
    echo ""
    echo "‚ùå Build still failing. Current errors:"
    echo ""
    npm run build 2>&1 | head -50
    
    echo ""
    echo "üîç Remaining files with TypeScript syntax:"
    find src/ -name "*.js" -o -name "*.jsx" | xargs grep -l "interface \|: [A-Z][a-zA-Z]*\|<[A-Z][a-zA-Z]*>" 2>/dev/null | head -10
fi

echo ""
echo "üìù Final Summary:"
echo "=================="
echo "‚Ä¢ Converted utility files to TypeScript (.ts)"
echo "‚Ä¢ Converted components to TypeScript (.tsx)"
echo "‚Ä¢ API routes cleaned and kept as JavaScript (.js)"
echo "‚Ä¢ Type definitions properly structured"
echo "‚Ä¢ Project now has clear TypeScript/JavaScript separation"
