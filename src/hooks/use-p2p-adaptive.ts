'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useP2PPersistent } from './use-p2p-persistent';\nimport { useP2PMobileOptimized } from './use-p2p-mobile-optimized';\n\nexport function useP2PAdaptive(roomId: string, displayName?: string) {\n  const [deviceType, setDeviceType] = useState<'mobile' | 'desktop' | null>(null);\n  \n  // Detect device type on client side only\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n      setDeviceType(isMobile ? 'mobile' : 'desktop');\n      console.log('📱🖥️ Device detected:', isMobile ? 'Mobile (using optimized hook)' : 'Desktop (using standard hook)');\n    }\n  }, []);\n  \n  // Default values for when hooks aren't ready\n  const defaultHookReturn = {\n    peerId: null,\n    status: { isConnected: false, connectedPeers: 0, networkReach: 'isolated' as const, signalStrength: 'none' as const },\n    isRetrying: false,\n    retryCount: 0,\n    connectToPeer: async () => false,\n    sendMessage: () => '',\n    onMessage: () => () => {},\n    getConnectedPeers: () => [],\n    forceReconnect: async () => false,\n    clearSession: () => {},\n  };\n  \n  // Use appropriate hook based on device type\n  if (deviceType === 'mobile') {\n    const mobileHook = useP2PMobileOptimized(roomId, displayName);\n    return {\n      ...mobileHook,\n      isMobile: true\n    };\n  } else if (deviceType === 'desktop') {\n    const desktopHook = useP2PPersistent(roomId, displayName);\n    return {\n      ...desktopHook,\n      isSignalingConnected: true, // Desktop doesn't have signaling issues\n      isMobile: false\n    };\n  }\n  \n  // Still detecting device type\n  return {\n    ...defaultHookReturn,\n    isSignalingConnected: true,\n    isMobile: false\n  };\n}\n