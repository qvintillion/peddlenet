steps:
  # Debug what files are available
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "=== FILES IN BUILD CONTEXT ==="
        ls -la
        echo ""
        echo "=== CHECKING SPECIFIC FILES ==="
        ls -la deployment/package.json signaling-server-production.js Dockerfile.simple
        echo ""
        echo "=== PRODUCTION SERVER INFO ==="
        echo "signaling-server-production.js size: $(wc -c < signaling-server-production.js) bytes"
        echo "Dockerfile.simple exists: $(test -f Dockerfile.simple && echo 'YES' || echo 'NO')"
        echo ""
        echo "=== PACKAGE.JSON CONTENT ==="
        cat deployment/package.json

  # Build with working production server (no SQLite dependencies)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-f', 'Dockerfile.simple', '-t', 'gcr.io/$PROJECT_ID/peddlenet-websocket-server', '.']

  # Push the image  
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/peddlenet-websocket-server']

  # Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'peddlenet-websocket-server'
      - '--image'
      - 'gcr.io/$PROJECT_ID/peddlenet-websocket-server'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--memory'
      - '512Mi'
      - '--cpu'
      - '1'
      - '--port'
      - '3001'
      - '--set-env-vars'
      - 'NODE_ENV=production'

images:
  - 'gcr.io/$PROJECT_ID/peddlenet-websocket-server'

options:
  logging: CLOUD_LOGGING_ONLY
