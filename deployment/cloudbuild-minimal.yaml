steps:
  # ENHANCED Docker build with comprehensive cache-busting
  - name: 'gcr.io/cloud-builders/docker'
    args: 
      - 'build'
      - '-f'
      - 'Dockerfile.minimal'
      - '--no-cache'  # CRITICAL: Force fresh build, no cache reuse
      - '--pull'      # CRITICAL: Pull latest base images
      - '--build-arg'
      - 'BUILD_DATE=${BUILD_ID}'
      - '--build-arg'
      - 'CACHEBUST=${_BUILD_ID}'  # Cache-busting argument
      - '--build-arg'
      - 'GIT_COMMIT_SHA=${_GIT_COMMIT_SHA}'
      - '--build-arg'
      - 'BUILD_TIMESTAMP=${_BUILD_ID}'
      - '--build-arg'
      - 'NODE_ENV=${_NODE_ENV}'  # Add NODE_ENV build arg
      - '--build-arg'
      - 'BUILD_TARGET=${_BUILD_TARGET}'  # Add BUILD_TARGET build arg
      - '-t'
      - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:${_IMAGE_TAG}'  # Use unique tag
      - '.'
    env:
      - 'DOCKER_BUILDKIT=1'  # Enable BuildKit for better caching control

  # Push the uniquely tagged image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:${_IMAGE_TAG}']

  # NOTE: Deployment is handled by the calling script for better control
  # This allows for health checks before routing traffic

# Enhanced substitutions with cache-busting support
substitutions:
  _SERVICE_NAME: 'peddlenet-websocket-server'
  _BUILD_TARGET: 'staging'
  _NODE_ENV: 'production'
  _IMAGE_TAG: 'latest'  # Will be overridden with unique tags
  _BUILD_ID: 'manual'   # Will be overridden with timestamp
  _GIT_COMMIT_SHA: 'unknown'  # Will be overridden with actual SHA

images:
  - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:${_IMAGE_TAG}'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'  # Faster builds for cache-busting strategy
  
# Timeout for build process
timeout: '600s'  # 10 minutes should be sufficient for Docker builds
